// =======================================================================================
// /////////////////////////Padawan Body Code v1.8 ///////////////////////////////////////
// =======================================================================================
//                                 danf
//                        Revised  Date: 02/19/13
//   Designed to be used with a second Arduino running the Padawan Dome code
//              EasyTransfer and PS2X_lib libraries by Bill Porter
//
//
//         Set Sabertooth 2x25 Dip Switches 1 and 2 Down, All Others Up
//         Set SyRen Switchs 2 & 4 Down, All Others Up
//         Placed a 10K ohm resistor between S1 & GND on the SyRen 10 itself

//************************** Set speed and turn here************************************//

byte drivespeed = 100; // 0-stop, 127-full speed. 
                       // Recommend beginner: 50 to 75, experienced: 100 to 127, I like 100
                       
byte turnspeed = 65;   // the higher this number the faster it will spin in place, lower - easier to controll. 
                       // Recommend beginner: 40 to 50, experienced: 50 $ up, I like 75
                       
byte domespeed = 127;  // If using a speed controller for the dome, sets the top speed
                       // Use a number up to 90 for RC, 127 for serial
                       
byte ramping = 1;      // Ramping- the lower this number the longer R2 will take to speedup or slow down,
                       // change this by incriments of 1

byte domecompensation = 50; // For controllers that centering problems, causing slight dome drift in one direction
                            // use the lowest number with no drift
                            
///////include libs and declare variables////////////////////////////
#include <Sabertooth.h>
#include <SoftwareSerial.h>
#include <SyRenSimplified.h>
#include <PS2X_lib.h>  //for v1.7
// #include <Servo.h> //disabled to use adafruit instead
#include <MP3Trigger.h>
 MP3Trigger trigger;
#include <SoftEasyTransfer.h>
#include <Wire.h> //needed for adafruit board
#include <Adafruit_PWMServoDriver.h>  //needed for adafruit board

// called this way, it uses the default address 0x40
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(); //adafruit board code
// you can also call it with a different address you want
//Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(0x41);

// Depending on your servo make, the pulse width min and max may vary, you 
// want these to be as small/large as possible without hitting the hard stop
// for max range. You'll have to tweak them as necessary to match the servos you
// have!
#define SERVOMIN  200 // adafruit board this is the 'minimum' pulse length count (out of 4096)
#define SERVOMAX  500 // adafruit board this is the 'maximum' pulse length count (out of 4096)

 // These displays use I2C to communicate, 2 pins are required to  
//  interface. For Arduino UNOs, thats SCL -> Analog 5, SDA -> Analog 4

// our servo # counter
uint8_t hpservonum = 15;  //adafruit board code
uint8_t mistservonum = 0;  //adafruit board code
//////////////////////////////////////////////////////////////////

/*   For Arduino 1.0 and newer, do this:   */
#include <SoftwareSerial.h>
SoftwareSerial domeSerial(A5, 8);
SoftwareSerial STSerial(2, 7);
SoftwareSerial SyRSerial(2, 5);
/*   For Arduino 22 and older, do this:   */
//#include <NewSoftSerial.h>
//NewSoftSerial domeSerial(A5, 8);//create software serial port
//NewSoftSerial STSerial(2, 7);
//NewSoftSerial SyRSerial(2, 5);

/////////////////////////////////////////////////////////////////
Sabertooth ST(128, STSerial);
SyRenSimplified SyR(SyRSerial); // Use SWSerial as the serial port.
SoftEasyTransfer ET;//create object

struct SEND_DATA_STRUCTURE{
  //put your variable definitions here for the data you want to send
  //THIS MUST BE EXACTLY THE SAME ON THE OTHER ARDUINO
  int hpx; // hp movement
  int hpy; // hp movement
  int hpl; // hp light
  int hpa; // hp automation
  int dsp; // 0 = random, 1 = alarm, 5 = leia, 11 = alarm2, 100 = no change
};

SEND_DATA_STRUCTURE domeData;//give a name to the group of data

PS2X ps2x; // create PS2 Controller Class
int error = 0; // part of the ps2x lib
byte type = 0; // part of the ps2x lib
byte vibrate = 0; // part of the ps2x lib
byte vol = 20; // 0 = full volume, 255 off 
byte drive = 0; // 0 = drive motors off ( right stick disabled )
byte automate = 0;
unsigned long automateMillis = 0;
byte automateDelay = random(5,15);// set this to min and max seconds between sounds
int turnDirection = 20;
byte action = 4;
unsigned long DriveMillis = 0;
int drivenum = 0;
int sticknum = 0;
int domenum = 0;
int turnnum = 0;
int HPWait = 0; //wait time value to turn on holo during sound
int HPManual = 0;
// Servo myservo; //not needed with adafruit board

//////////////set up run once//////////////////////////////////////////

void setup(){
 // myservo.attach(A5);  //define servo on pin A5 //cant use with adafruit board
  SyRSerial.begin(9600);
  SyR.motor(0); 
  STSerial.begin(9600);   // 9600 is the default baud rate for Sabertooth packet serial.
 // ST.setBaudRate(9600); //use to change back to 9600
 // STSerial.end(); //use to change baud rate
 
  //ST.autobaud();          // Send the autobaud command to the Sabertooth controller(s).
                          // NOTE: *Not all* Sabertooth controllers need this command.
           //       It doesn't hurt anything, but V2 controllers use an
                          //       EEPROM setting (changeable with the function setBaudRate) to set
                          //       the baud rate instead of detecting with autobaud.
                          //
                          //       If you have a 2x12, 2x25 V2, 2x60 or SyRen 50, you can remove
                          //       the autobaud line and save yourself two seconds of startup delay.
              
  ST.drive(0); // The Sabertooth won't act on mixed mode packet serial commands until
  ST.turn(0);  // it has received power levels for BOTH throttle and turning, since it
               // mixes the two together to get diff-drive power levels for both motors.
 trigger.setup();
 
 error = ps2x.config_gamepad(13,11,10,12, true, false);   //setup pins and settings:  GamePad(clock, command, attention, data, Pressures?, Rumble?) check for error
 trigger.setVolume(vol);//anything with trigger. is for the mp3trigger
 type = ps2x.readType();
 domeSerial.begin(57600);//start the library, pass in the data details and the name of the serial port.
 ET.begin(details(domeData), &domeSerial); 
  
  //Serial.begin(9600); //only for debug mode?
  pwm.begin(); //adafruit board code 
  pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates //adafruit code
    
 pinMode(3, OUTPUT); // holo light
 }
 
 ///////Loop run over and over//////////////////////////////////////
 //////////////////////////////////////////////////////////////////

void loop(){
    
 if(error == 1) //skip loop if no controller found
  return; 
  
  ps2x.read_gamepad();   //read controller and set large motor to spin at 'vibrate' speed
 
 //// enable / disable right stick & play sound 
 if(ps2x.ButtonPressed(PSB_START)) 
{if (drive<1)
    {drive = 1; trigger.play(52);}
 else {drive = 0; trigger.play(53);}
}

 ////turn hp automation or automate on & off      
 if(ps2x.ButtonPressed(PSB_SELECT))
  {if(ps2x.Button(PSB_R2))
   {if(domeData.hpa == 1)
    {domeData.hpa = 0; domeData.dsp = 100; ET.sendData();}//if hp automation is off, turn it on
    else
    {domeData.hpa = 1; domeData.dsp = 100; ET.sendData();}//turn hp automation off
  } 
/////////////automate
else
{if (automate<1)
{automate = 1; trigger.play(52);}
else {automate = 0; trigger.play(53);}
}}

if (automate == 1)
{ if (ps2x.Analog(PSS_LX)!=128)
  { automateMillis = millis();}
  unsigned long currentMillis = millis();
   if (currentMillis - automateMillis > (automateDelay*1000))
 {
  automateMillis = millis();
  action = random(1,5);
  if (action>1)
  {
   (trigger.play(random(32,52)));
  }
  if (action<4)
  {
   SyR.motor(turnDirection);
   delay(750);
  SyR.motor(0);
   if (turnDirection>0)
      {turnDirection = -49;}
   else 
      {turnDirection = 45;}
  }
  automateDelay = random(5,15);// set this to min and max seconds between sounds
}}
////volume controll
 if(ps2x.Button(PSB_PAD_UP)) 
 {
  if(ps2x.Button(PSB_R1))
   { if (vol>0)
   {vol--;
   trigger.setVolume(vol);}// volume up
   }  
 }
  if(ps2x.Button(PSB_PAD_DOWN)) 
  {
  if(ps2x.Button(PSB_R1))
   { if (vol<255)
   {vol++;
   trigger.setVolume(vol);}//volume down
   } 
 }

//mist servo

  if(ps2x.Button(PSB_R3)) //Right joystick pressed or held
  {
     
    pwm.setPWM(mistservonum, 0, 375); //mist servo switch on
   
  }   
  else //right stick released
  {
     
  pwm.setPWM(mistservonum, 0, SERVOMAX); //mist off
     }  
       



 /////hp movement
if(ps2x.ButtonPressed(PSB_PAD_UP))
{if (!(ps2x.Button(PSB_R1)))
 {
   domeData.hpy = 30; domeData.dsp = 100; ET.sendData();
//myservo.write(55);              // old code tell servo to go to position center
 pwm.setPWM(hpservonum, 0, 250);  //code for servo board (servonum, pulsestart, pulseend)
 
 //pwm.setPWM(0, 0, SERVOMAX); //mist test
 }}
 if(ps2x.ButtonPressed(PSB_PAD_DOWN))
{if (!(ps2x.Button(PSB_R1)))
 {
   domeData.hpy = 150; domeData.dsp = 100; ET.sendData();
//   myservo.write(70);              //old code tell servo to go to position right
// Serial.println(0); //debug only?
  pwm.setPWM(hpservonum, 0, 350);  //code for servo board (servonum, pulsestart, pulseend)
  //pwm.setPWM(0, 0, 375); //mist test
 }}
 if(ps2x.ButtonReleased(PSB_PAD_UP)||ps2x.ButtonReleased(PSB_PAD_DOWN))
 {domeData.hpy = 0; domeData.dsp = 100; ET.sendData();}
  
 if(ps2x.ButtonPressed(PSB_PAD_RIGHT))
 {
   domeData.hpx = 150; domeData.dsp = 100; ET.sendData();
//myservo.write(90);              // old code tell servo to go to position right
 pwm.setPWM(hpservonum, 0, SERVOMAX);  //code for servo board (servonum, pulsestart, pulseend)
 
 }
 if(ps2x.ButtonPressed(PSB_PAD_LEFT))
 {
   domeData.hpx = 30; domeData.dsp = 100; ET.sendData();
//myservo.write(40);              //old code  tell servo to go to position left
 pwm.setPWM(hpservonum, 0, SERVOMIN);  //code for servo board (servonum, pulsestart, pulseend)
 
 }
 if(ps2x.ButtonReleased(PSB_PAD_RIGHT)||ps2x.ButtonReleased(PSB_PAD_LEFT))
 {domeData.hpx = 0; domeData.dsp = 100; ET.sendData();}
 
 /*  //original buttoncode

 /////play sounds and change display
  if(ps2x.ButtonPressed(PSB_GREEN))//triangle top
   {if(ps2x.Button(PSB_L1))
      {(trigger.play(8)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_L2))
      {(trigger.play(2)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_R1))
      {(trigger.play(9)); domeData.dsp = 0; ET.sendData();}
     else 
      {(trigger.play(random(13,17))); domeData.dsp = 0; ET.sendData();}}
  if(ps2x.ButtonPressed(PSB_BLUE))//x bottom
   {if(ps2x.Button(PSB_L1))
      {(trigger.play(6)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_L2))
      {(trigger.play(1)); domeData.dsp = 1; ET.sendData(); domeData.dsp = 0;}
    else if(ps2x.Button(PSB_R1))
      {(trigger.play(11)); domeData.dsp = 11; ET.sendData(); domeData.dsp = 0;}
     else 
      {(trigger.play(random(17,25))); domeData.dsp = 0; ET.sendData();}}
  if(ps2x.ButtonPressed(PSB_RED))//circle right
   {if(ps2x.Button(PSB_L1))
      {(trigger.play(7)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_L2))
      {(trigger.play(3)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_R1))
      {(trigger.play(10)); domeData.dsp = 0; ET.sendData();}
     else 
      {(trigger.play(random(32,52))); domeData.dsp = 0; ET.sendData();}}
  if(ps2x.ButtonPressed(PSB_PINK))//square left
   {if(ps2x.Button(PSB_L1))
      {(trigger.play(5)); domeData.dsp = 5; ET.sendData(); domeData.dsp = 0;}
    else if(ps2x.Button(PSB_L2))
      {(trigger.play(4)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_R1))
      {(trigger.play(12)); domeData.dsp = 0; ET.sendData();}
     else 
      {(trigger.play(random(25,32))); domeData.dsp = 0; ET.sendData();}}
*/

//New Buttons

  ps2x.read_gamepad();   //read controller and set large motor to spin at 'vibrate' speed
 /////play sounds and change display
  if(ps2x.ButtonPressed(PSB_GREEN))//triangle top
   {if(ps2x.Button(PSB_L1))
      {(trigger.play(8)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_L2))
      {(trigger.play(19)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_R1))
      {(trigger.play(9)); domeData.dsp = 0; ET.sendData();}
      else if(ps2x.Button(PSB_R2))
      {(trigger.play(56)); domeData.dsp = 0; ET.sendData();}
     else 
      {(trigger.play(random(13,17))); domeData.dsp = 0; ET.sendData();}}
  if(ps2x.ButtonPressed(PSB_BLUE))//x bottom
   {if(ps2x.Button(PSB_L1))
      {(trigger.play(6)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_L2))
      {(trigger.play(1)); domeData.dsp = 1; ET.sendData(); domeData.dsp = 0;}
    else if(ps2x.Button(PSB_R1))
      {(trigger.play(11)); domeData.dsp = 11; ET.sendData(); domeData.dsp = 0;}
      else if(ps2x.Button(PSB_R2))
      {(trigger.play(26)); domeData.dsp = 0; ET.sendData();}
     else 
      {(trigger.play(random(17,25))); domeData.dsp = 0; ET.sendData();}}
  if(ps2x.ButtonPressed(PSB_RED))//circle right
   {if(ps2x.Button(PSB_L1))
      {(trigger.play(7)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_L2))
      {(trigger.play(3)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_R1))
      {(trigger.play(54)); domeData.dsp = 0; ET.sendData();}
      else if(ps2x.Button(PSB_R2))
      {(trigger.play(55)); domeData.dsp = 0; ET.sendData();}
     else 
      {(trigger.play(random(32,52))); domeData.dsp = 0; ET.sendData();}}
 
 if(ps2x.ButtonPressed(PSB_PINK))//square left

    {if(ps2x.Button(PSB_L1))
      {if(ps2x.Button(PSB_L2))
      
      {(trigger.play(5)); domeData.dsp = 5; ET.sendData(); domeData.dsp = 0; digitalWrite(3, HIGH);HPWait = 870;}
  else 
  {(trigger.play(57)); domeData.dsp = 5; ET.sendData(); domeData.dsp = 0; digitalWrite(3, HIGH);HPWait = 87;} 
  }
    
    
     
    else if(ps2x.Button(PSB_L2))
      {(trigger.play(4)); domeData.dsp = 0; ET.sendData();}
    else if(ps2x.Button(PSB_R1))
      {(trigger.play(59)); domeData.dsp = 0; ET.sendData();}
      else if(ps2x.Button(PSB_R2))
      {(trigger.play(20)); domeData.dsp = 0; ET.sendData();}
     else 
      {(trigger.play(random(25,32))); domeData.dsp = 0; ET.sendData();}}
      


 ////turn hp light on & off      
  if(ps2x.ButtonPressed(PSB_L3)) //left joystick
  {
    if(domeData.hpl == 1)
   { digitalWrite(3, LOW);
   domeData.hpl = 0; domeData.dsp = 100; ET.sendData();HPManual = 0;
  }//if hp light is on, turn it off
    else
    {digitalWrite(3, HIGH);
    domeData.hpl = 1; domeData.dsp = 100; ET.sendData();HPManual = 1;}//turn hp light on
  }   
   
 /////foot drives 
/////////////////new stuff//////////////////
sticknum = (map(ps2x.Analog(PSS_RY), 0, 255, -drivespeed, drivespeed));
  
   if (drivenum < sticknum)
   {
     if (sticknum-drivenum<(ramping+1))
     drivenum+=ramping;
     else
     drivenum = sticknum;
     //Serial.print("drivenum: "); Serial.println(drivenum);
   }
     
   else if (drivenum > sticknum)
   {
     if (drivenum-sticknum<(ramping+1))
     drivenum-=ramping;
     else
     drivenum = sticknum;
     //Serial.print("drivenum: "); Serial.println(drivenum);
   }
 
 
 turnnum = (ps2x.Analog(PSS_RX));   
 if (turnnum <= 200 && turnnum >= 54)
  turnnum = (map(ps2x.Analog(PSS_RX), 54, 200, -(turnspeed/3), (turnspeed/3)));
 else if (turnnum > 200)
  turnnum = (map(ps2x.Analog(PSS_RX), 201, 255, turnspeed/3, turnspeed));
 else if (turnnum < 54)
  turnnum = (map(ps2x.Analog(PSS_RX), 0, 53, -turnspeed, -(turnspeed/3))); 
  //Serial.print("turnnum: "); Serial.println(turnnum);
////////////////////////////////// 
  if (drive == 1)// right stick (drive)
{  
  ST.turn(turnnum);
  ST.drive(drivenum);
}

/////dome drive
domenum = (map(ps2x.Analog(PSS_LX), 0, 255, -domespeed, domespeed));
if (domenum > -domecompensation && domenum < domecompensation)
  domenum = 0;
SyR.motor(domenum);

if (HPWait>0)
   HPWait = HPWait-1;

if (HPManual == 0)
    {if (HPWait == 0)
   digitalWrite(3, LOW);}
   
////////////
 delay(25);
}
/////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

